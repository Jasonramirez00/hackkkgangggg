<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
  <title>Play4Prizes</title>

  <!-- Bootstrap -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <link rel="stylesheet" href="css.css">
  <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
      <![endif]-->
    </head>
    <body>
      <nav class="navbar navbar-default">
        <div class="container-fluid">
          <div class="navbar-header">
            <a class="navbar-brand" href="#">Play4Prizes</a>
          </div>
          <ul class="nav navbar-nav">
            <li class="active"><a href="#home">Home</a></li>
            <li><a href="#game">Games</a></li>
            <li><a href="#prize">Prizes</a></li> 
            <li><a href="#about">About</a></li> 
          </ul>
        </div>
      </nav>
      <div class="container-fluid">
        <div class="row">
          <div class="col-sm-10">
  			<div class=game>
  				<canvas id="myCanvas" width="640" height="380" style="margin-top: 60px;"></canvas>
  			</div>
          </div>
          <div class="col-sm-2">
            <img src="http://placehold.it/180x500">
            </div>
          </div>
        </div>
        <footer class="footer">
          <div class="container">
            <p class="text-muted">Footer will go here...</p>
          </div>
        </footer>

        <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
        <!-- Include all compiled plugins (below), or include individual files as needed -->
        <script src="js/bootstrap.min.js"></script>
        <script>
	var canvas = document.getElementById("myCanvas");
	var ctx = canvas.getContext("2d");
	var ballRadius = 10;
	
	var playerHeight = 30;
	var playerWidth = 30;
	var playerX = 10;
    var playerY = 10;
	var moveSpeed = 4;
	
	// User Input
	var rightPressed = false;
	var leftPressed = false;
    var upPressed = false;
    var downPressed = false;
    var moveAllow = [true, true, true, true];
    
    var level = 0;

	
	function drawPlayer() {
	    ctx.beginPath();
        ctx.fillStyle = "#ffa500";
	    ctx.fillRect(playerX, playerY, playerWidth, playerHeight);
	    ctx.closePath();
	}
    
    var killWall = function(x,y,w,h){
        ctx.fillStyle = "#ff0000";
        ctx.fillRect(x,y,w,h);
        var rightEdge = playerX + playerWidth;
        var leftEdge = playerX;
        var topEdge = playerY;
        var bottomEdge = playerY + playerHeight;
        
        if (rightEdge > x && leftEdge < x + w && topEdge < y + h && bottomEdge > y){
            //if (level === 2){
            //    charPos = [30, 105];
            //} else {
            //    playerX = 0;
            //    playerY = 0;
            //}
            playerX = 10;
            playerY = 10;
        }
    } 
    
    var wall = function(x,y,w,h){
        ctx.fillStyle = "#0095DD";
        ctx.fillRect(x,y,w,h);
        var rightEdge = playerX + playerWidth;
        var leftEdge = playerX;
        var topEdge = playerY;
        var bottomEdge = playerY + playerHeight;
        
        if (rightEdge >= x && leftEdge < x && bottomEdge > y + moveSpeed && topEdge < y + h - moveSpeed){
            moveAllow[3] = false;
            playerX = x - playerWidth;
        } if (leftEdge <= x + w && rightEdge > x + w && bottomEdge > y + moveSpeed && topEdge < y + h - moveSpeed){
            moveAllow[2] = false;
            playerX = x + w;
        } if (topEdge <= y + h && bottomEdge > y + h && rightEdge > x + moveSpeed && leftEdge < x + w - moveSpeed){
            moveAllow[0] = false;
            playerY = y + h;
        } if (bottomEdge >= y && topEdge < y && rightEdge > x + moveSpeed && leftEdge < x + w - moveSpeed){
            moveAllow[1] = false;
            playerY = y - playerHeight;
        }
    }
    
    var goal = function(x,y,w,h){
        ctx.fillStyle = "#00ff00";
        ctx.fillRect(x,y,w,h);
        var rightEdge = playerX + playerWidth;
        var leftEdge = playerX;
        var topEdge = playerY;
        var bottomEdge = playerY + playerHeight;
        if (rightEdge > x && leftEdge < x + w && topEdge < y + h && bottomEdge > y){
            if (level === 'menu'){
                level = 0;
            } else {
                level += 1;
            }
            if (level === 2){
                charPos = [30, 105];
            } else {
                playerX = 10;
                playerY = 10;
            }
        }
    }
	
	function collisionDetection() {
	    for(c=0; c < brickColumnCount; c++) {
	        for(r=0; r < brickRowCount; r++) {
	            var b = bricks[c][r];
	            if(b.status == 1) {
	                if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
	                    dy = -dy;
	                    b.status = 0;
	                }
	            }
	        }
	    }
	}
	
	function draw() {
        var t = Date.now() / 1000;
	    ctx.clearRect(0, 0, canvas.width, canvas.height);
		drawPlayer();
        moveAllow = [true, true, true, true];
        if (level == 0) {
            //wall(150, 99, 24, 225);
            wall(75, 150, 25, 300);
            wall(200, 0, 25, 300);
            wall(300, 150, 25, 300);
            killWall(400, 0, 25, 300);
            killWall(525, 150, 25, 300);

            goal(canvas.width - 50, 0, 50, 50);
            
            // Border
            wall(0, 0, 5, canvas.height);
            wall(0, 0, canvas.width, 5);
            wall(canvas.width - 5, 0, 5, canvas.height);
            wall(0, canvas.height - 5, canvas.width, 5);
        }
        else if (level == 1) {
            //       x                                y    w   h
            killWall(Math.sin(t*2 + 2.5) * 50 + 50,  50, 25, 25);
            killWall(Math.sin(t*2 + 2) * 50 + 50,    75, 25, 25);
            killWall(Math.sin(t*2 + 1.5) * 50 + 50, 100, 25, 25);
            killWall(Math.sin(t*2 + 1) * 50 + 50,   125, 25, 25);
            killWall(Math.sin(t*2 + 0.5) * 50 + 50, 150, 25, 25);
            killWall(Math.sin(t*2 + 0) * 50 + 50,   175, 25, 25);
            killWall(Math.sin(t*2 - 0.5) * 50 + 50, 200, 25, 25);
            killWall(Math.sin(t*2 - 1) * 50 + 50,   225, 25, 25);
            killWall(Math.sin(t*2 - 1.5) * 50 + 50, 250, 25, 25);
            killWall(Math.sin(t*2 - 2) * 50 + 50,   275, 25, 25);
            killWall(Math.sin(t*2 - 2.5) * 50 + 50, 300, 25, 25);

            killWall(Math.sin(t*2 - 2.5) * 50 + 190,  50, 25, 25);
            killWall(Math.sin(t*2 - 2) * 50 + 190,    75, 25, 25);
            killWall(Math.sin(t*2 - 1.5) * 50 + 190, 100, 25, 25);
            killWall(Math.sin(t*2 - 1) * 50 + 190,   125, 25, 25);
            killWall(Math.sin(t*2 - 0.5) * 50 + 190, 150, 25, 25);
            killWall(Math.sin(t*2 - 0) * 50 + 190,   175, 25, 25);
            killWall(Math.sin(t*2 + 0.5) * 50 + 190, 200, 25, 25);
            killWall(Math.sin(t*2 + 1) * 50 + 190,   225, 25, 25);
            killWall(Math.sin(t*2 + 1.5) * 50 + 190, 250, 25, 25);
            killWall(Math.sin(t*2 + 2) * 50 + 190,   275, 25, 25);
            killWall(Math.sin(t*2 + 2.5) * 50 + 190, 300, 25, 25);
            
            killWall(Math.sin(t*2 + Math.PI / 2) * 175 + 448, Math.cos(t*2 + Math.PI / 2) * 175 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 + Math.PI / 2) * 130 + 448,   Math.cos(t*2 + Math.PI / 2) * 130 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 + Math.PI / 2) * 90 + 448, Math.cos(t*2 + Math.PI / 2) * 90 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 + Math.PI / 2) * 55 + 448,   Math.cos(t*2 + Math.PI / 2) * 55 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 + Math.PI / 2) * 25 + 448,   Math.cos(t*2 + Math.PI / 2) * 25 + canvas.height / 2, 25, 25);
            
            killWall(Math.sin(t*2 + Math.PI) * 175 + 448, Math.cos(t*2 + Math.PI) * 175 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 + Math.PI) * 130 + 448,   Math.cos(t*2 + Math.PI) * 130 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 + Math.PI) * 90 + 448, Math.cos(t*2 + Math.PI) * 90 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 + Math.PI) * 55 + 448,   Math.cos(t*2 + Math.PI) * 55 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 + Math.PI) * 25 + 448,   Math.cos(t*2 + Math.PI) * 25 + canvas.height / 2, 25, 25);
            
            killWall(Math.sin(t*2 - Math.PI / 2) * 175 + 448, Math.cos(t*2 - Math.PI / 2) * 175 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 - Math.PI / 2) * 130 + 448,   Math.cos(t*2 - Math.PI / 2) * 130 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 - Math.PI / 2) * 90 + 448, Math.cos(t*2 - Math.PI / 2) * 90 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 - Math.PI / 2) * 55 + 448,   Math.cos(t*2 - Math.PI / 2) * 55 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2 - Math.PI / 2) * 25 + 448,   Math.cos(t*2 - Math.PI / 2) * 25 + canvas.height / 2, 25, 25);
            
            killWall(Math.sin(t*2) * 175 + 448, Math.cos(t*2) * 175 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2) * 130 + 448,   Math.cos(t*2) * 130 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2) * 90 + 448, Math.cos(t*2) * 90 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2) * 55 + 448,   Math.cos(t*2) * 55 + canvas.height / 2, 25, 25);
            killWall(Math.sin(t*2) * 25 + 448,   Math.cos(t*2) * 25 + canvas.height / 2, 25, 25);
            
            wall(448, canvas.height / 2, 25, 25);
            
            wall(125, 0, 15, canvas.height - 45);
            wall(265, 45, 15, canvas.height);

            goal(canvas.width - 60, canvas.height - 60, 50, 50);
            
            // Border
            wall(0, 0, 5, canvas.height);
            wall(0, 0, canvas.width, 5);
            wall(canvas.width - 5, 0, 5, canvas.height);
            wall(0, canvas.height - 5, canvas.width, 5);
        }

        
		if(upPressed && playerY > 0 && moveAllow[0]) {
		    playerY -= moveSpeed;
            if (playerY < 0) playerY = 0;
		}
        else if(downPressed && playerY < canvas.height - playerHeight && moveAllow[1]) {
		    playerY += moveSpeed;
            if (playerY > canvas.height - playerHeight) playerY = canvas.height - playerHeight;
		}
        if(leftPressed && playerX > 0 && moveAllow[2]) {
		    playerX -= moveSpeed;
            if (playerX < 0) playerX = 0;
		}
		else if(rightPressed && playerX < canvas.width - playerWidth && moveAllow[3]) {
			playerX += moveSpeed;
            if (playerX > canvas.width - playerWidth) playerX = canvas.width - playerWidth;
		}
		
        
        
		
        requestAnimationFrame(draw);

	}
	
	document.addEventListener("keydown", keyDownHandler, false);
	document.addEventListener("keyup", keyUpHandler, false);
	function keyDownHandler(e) {
	    if(e.keyCode == 39) {
	        rightPressed = true;
	    }
	    else if(e.keyCode == 37) {
	        leftPressed = true;
	    }
        else if (e.keyCode == 38) {
            upPressed = true;
        }
        else if (e.keyCode == 40) {
            downPressed = true;
        }
	}
	
	function keyUpHandler(e) {
		if(e.keyCode == 39) {
			rightPressed = false;
		}
		else if(e.keyCode == 37) {
			leftPressed = false;
		}
        else if(e.keyCode == 38) {
			upPressed = false;
		}
        else if(e.keyCode == 40) {
			downPressed = false;
		}
	}
    draw();
    
</script>
    
</script>
      </body>
</html>
